package main

//
// a distributed application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import "MapReduce/mr"
import "regexp"
import "strings"

// The map function is called once for each file of input. The first
// argument is the contents of the input file, and the second is the
// regular expression pattern to match. The return value is a slice
// of key/value pairs, where the key is the matching line and the value
// is an empty string.
func grepMap(contents string, pattern string) []mr.KeyValue {
	// Compile the regular expression pattern.
	re, err := regexp.Compile(pattern)
	if err != nil {
		return nil // or handle error appropriately
	}

	// Split the contents into lines.
	lines := strings.Split(contents, "\n")

	kva := []mr.KeyValue{}
	for _, line := range lines {
		if re.MatchString(line) {
			kv := mr.KeyValue{line, ""}
			kva = append(kva, kv)
		}
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task. In this case, the key is a line that matched the
// pattern, and the values are all empty strings. The reduce function
// simply returns the key as the result.

func grepReduce(key string, values []string) string {
	return key
}